package g

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mini-tiger/tjtools/file"
	"io/ioutil"
	"os"
	"path"
	"sync"
)

/**
 * @Author: Tao Jun
 * @Description: g
 * @File:  pushconf
 * @Version: 1.0.0
 * @Date: 2021/11/19 上午11:33
 */

const DefaultPushConfigFile = "PushConfig.json"

type pushConfig struct {
	System     System     `mapstructure:"system" json:"system" yaml:"system" validate:"required"`
	Es         Es         `mapstructure:"es" json:"es" yaml:"es" validate:"required"`
	Prometheus Prometheus `mapstructure:"prometheus" json:"prometheus" yaml:"prometheus" validate:"required"`
	Version    uint64     `mapstructure:"version" json:"version" yaml:"version" validate:"gte=1,required"`
}

type System struct {
	Interval int `mapstructure:"interval" json:"interval" yaml:"interval" validate:"gte=1,required"`
}

type Es struct {
	Host string `mapstructure:"host" json:"host" yaml:"host" validate:"url,required"`
}

type Prometheus struct {
	PushGateWayAddressFirst  string `mapstructure:"pushGateWayAddressFirst" json:"pushGateWayAddressFirst" yaml:"pushGateWayAddressFirst" validate:"required,url"`
	PushGateWayAddressSecond string `mapstructure:"pushGateWayAddressSecond" json:"pushGateWayAddressSecond" yaml:"pushGateWayAddressSecond" validate:"required,url"`
	PushGateWayAddressThird  string `mapstructure:"pushGateWayAddressThird" json:"pushGateWayAddressThird" yaml:"pushGateWayAddressThird" validate:"required,url"`
}

// 只能有一个
var PushCfgEntry *pushConfigEntry = &pushConfigEntry{pushConfig: &pushConfig{}}

type pushConfigEntry struct {
	sync.RWMutex
	*pushConfig
}

func InitPushConfig()  {
	if !file.IsExist(DefaultPushConfigFile) {
		logge.Error("初始化加载 PushConfig 失败 %s 文件不存在\n",DefaultPushConfigFile)
		return
	}
	bs,err:=ioutil.ReadFile(DefaultPushConfigFile)
	if err!=nil{
		logge.Error("初始化加载 PushConfig 读取失败 %s \n",err.Error())
		return
	}
	err=PushCfgEntry.SetConf(bs)
	if err!=nil{
		logge.Error("初始化加载 PushConfig SetConf失败 %s \n",err.Error())
		return
	}
	logge.Warn("初始化加载 PushConfig 成功 %+v \n",PushCfgEntry.GetConf())
}

func (p *pushConfigEntry) SetConf(bs []byte) (err error) {
	p.Lock()
	defer p.Unlock()
	tp := &pushConfig{}
	err = json.Unmarshal(bs, tp)
	if err != nil {
		return err
	}
	err = Validate.Struct(tp)
	if err != nil {
		return err
	}
	if tp.Version > p.Version {
		p.pushConfig = tp
		go p.WriteConf()
	} else {
		return errors.New(fmt.Sprintf("version Current:%d", p.pushConfig.Version))
	}

	return err
}

func (p *pushConfigEntry) WriteConf() {
	p.RLock()
	defer p.RUnlock()
	content, _ := json.MarshalIndent(p.pushConfig,"","\t")
	err := ioutil.WriteFile(path.Join(CurrentDir,string(os.PathSeparator),DefaultPushConfigFile), content, 0644)
	if err != nil {
		logge.Error("Json 写入失败 :%s\n", err.Error())
	}else{
		logge.Info("Json 写入成功\n")
	}

}

func (p *pushConfigEntry) GetConf() *pushConfig {
	p.RLock()
	p.RUnlock()
	return p.pushConfig

}
